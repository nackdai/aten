name: CI

on:
  push:
    paths-ignore:
    - '.circleci/**'
    - '.devcontainer/*.json'
    - '.devcontainer/*.yml'
    - '.gitignore'
    - 'asset/**'
    - 'docs/**'
    - 'gallery/**'
    - 'vs2015/**'
    - 'vs2019/**'

jobs:
  build_docker:
    name: build_docker
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get diff files
        id: getfile
        uses: ./.github/actions/get_changed_files
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dump
        run: echo ${{ steps.getfile.outputs.added_modified }}

      # Run below step if Dockerfile is in modified files
      - name: Build and push base image
        id: build_base_image
        if: contains(steps.getfile.outputs.added_modified, 'env/aten/Dockerfile') == true
        run: |
          docker build -t aten ./env/aten/
          docker login docker.pkg.github.com --username $GITHUB_ACTOR --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}
          docker tag aten docker.pkg.github.com/${{ github.repository }}/aten:latest
          docker push docker.pkg.github.com/${{ github.repository }}/aten:latest

      - name: Check outcome of building base image
        run: echo ${{ steps.build_base_image.outcome }}

      # To build dev image, base image is necessary.
      # If building dev image is necessary but base image is not built.
      # Try to Pull base image.
      - name: Check if building base image run for building dev image
        if: contains(steps.getfile.outputs.added_modified, 'env/dev/Dockerfile') == true && steps.build_base_image.outcome != 'success'
        run: |
          docker login docker.pkg.github.com --username $GITHUB_ACTOR --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}
          docker pull docker.pkg.github.com/${{ github.repository }}/aten:latest

      # dev image is build from base image.
      # If outcome of building base image is success, we can treat base image is updated.
      - name: Build and push dev image
        #if: contains(steps.getfile.outputs.added_modified, 'env/aten/Dockerfile') == true || contains(steps.getfile.outputs.added_modified, 'env/dev/Dockerfile') == true
        if: contains(steps.getfile.outputs.added_modified, 'env/dev/Dockerfile') == true || steps.build_base_image.outcome == 'success'
        run: |
          docker build -t aten_dev --build-arg base_from=docker.pkg.github.com/${{ github.repository }}/aten:latest -f ./env/dev/Dockerfile .
          docker login docker.pkg.github.com --username $GITHUB_ACTOR --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}
          docker tag aten_dev docker.pkg.github.com/${{ github.repository }}/aten_dev:latest
          docker push docker.pkg.github.com/${{ github.repository }}/aten_dev:latest

  lint:
    name: lint
    runs-on: ubuntu-18.04
    needs: build_docker

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run image
        run: |
          docker login docker.pkg.github.com --username $GITHUB_ACTOR --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}
          docker pull docker.pkg.github.com/${{ github.repository }}/aten_dev:latest
          docker run -it -d --name aten_dev -v $GITHUB_WORKSPACE:/workspace -w /workspace docker.pkg.github.com/${{ github.repository }}/aten_dev:latest

      # Unfortunately, it seems that docker exec don't run .bashrc.
      # Therefore, for enabling pyenv, we need to call eval for enabling pyenv.
      - name: lint
        run: docker exec aten_dev bash -c 'eval "$(pyenv init --path)" && pre-commit run -a'

  build:
    name: build
    runs-on: ubuntu-18.04
    needs: lint

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Login registry
        run: docker login docker.pkg.github.com --username $GITHUB_ACTOR --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull docker.pkg.github.com/${{ github.repository }}/aten_dev:latest

      - name: Run image
        run: docker run -it -d --name aten_dev -v $GITHUB_WORKSPACE:/workspace -w /workspace docker.pkg.github.com/${{ github.repository }}/aten_dev:latest

      - name: Configure
        run: |
          docker exec aten_dev bash -c 'mkdir build'
          docker exec aten_dev bash -c 'cd build && cp ../scripts/RunCMake.sh ./ && ./RunCMake.sh Release 75'

      - name: Build
        run: docker exec aten_dev bash -c 'cd build && ninja -j 4'

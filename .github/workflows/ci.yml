name: CI

on:
  push:
    paths-ignore:
    - '.devcontainer/*.json'
    - '.devcontainer/*.yml'
    - '.gitignore'
    - 'asset/**'
    - 'gallery/**'
    - 'vs2015/**'
    - 'vs2019/**'

env:
  RUNS_ON: ubuntu-20.04

jobs:
  cancel:
    name: cancel
    runs-on: ${{ env.RUNS_ON }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.GITHUB_TOKEN }}

  build_docker:
    name: build_docker
    runs-on: ${{ env.RUNS_ON }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get diff files
        id: getfile
        uses: ./.github/actions/get_changed_files
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dump
        run: echo ${{ steps.getfile.outputs.added_modified }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run the following step if Dockerfile is modified.
      - name: Build and push base image
        id: build_base_image
        if: contains(steps.getfile.outputs.added_modified, 'env/aten/Dockerfile') == true || contains(steps.getfile.outputs.added_modified, 'ci.yml') == true
        run: |
          docker build -t ghcr.io/${{ github.repository }}/aten:latest ./env/aten/
          docker push ghcr.io/${{ github.repository }}/aten:latest

      - name: Check outcome of building base image
        run: echo ${{ steps.build_base_image.outcome }}

      # Build the dev image based on base image.
      - name: Build and push dev image
        if: contains(steps.getfile.outputs.added_modified, 'env/dev/Dockerfile') == true || steps.build_base_image.outcome == 'success'
        run: |
          docker build -t ghcr.io/${{ github.repository }}/aten_dev:latest \
            --build-arg base_from=ghcr.io/${{ github.repository }}/aten:latest \
            -f ./env/dev/Dockerfile .
          docker push ghcr.io/${{ github.repository }}/aten_dev:latest

  lint:
    name: lint
    runs-on: ${{ env.RUNS_ON }}
    needs: build_docker
    container:
      image: ghcr.io/${{ github.repository }}/aten_dev:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Unfortunately, it seems that docker exec don't run .bashrc.
      # Therefore, for enabling pyenv, we need to call eval for enabling pyenv.
      - name: lint
        run: |
          git config --global --add safe.directory ./
          eval "$(pyenv init --path)
          pre-commit run -a

  build:
    name: build
    runs-on: ${{ env.RUNS_ON }}
    needs: lint
    container:
      image: ghcr.io/${{ github.repository }}/aten_dev:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cp ../scripts/RunCMake.sh ./
          ./RunCMake.sh Release 75

      - name: Build
        run: |
          cd build
          ninja -j 4
